# Version: 5.0.0 (Using https://semver.org/)
# Updated: 2023-10-04
# See https://github.com/RehanSaeed/EditorConfig/releases for release notes.
# See https://github.com/RehanSaeed/EditorConfig for updates to this file.
# See http://EditorConfig.org for more information about .editorconfig files.

##########################################
# Common Settings
##########################################

# This file is the top-most EditorConfig file
root = true

# All Files
[*]
charset = utf-8
indent_style = space
indent_size = 4
tab_width = 4
insert_final_newline = true
trim_trailing_whitespace = true

##########################################
# File Extension Settings
##########################################

# Visual Studio Solution Files
[*.sln]
indent_style = tab

# Visual Studio XML Project Files
[*.{csproj,vbproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML Configuration Files
[*.{xml,config,props,targets,nuspec,resx,ruleset,vsixmanifest,vsct}]
indent_size = 2

# JSON Files
[*.{json,json5,webmanifest}]
indent_size = 2

# YAML Files
[*.{yml,yaml}]
indent_size = 2

# Markdown Files
[*.{md,mdx}]
trim_trailing_whitespace = false

# Web Files
[*.{htm,html,js,jsm,ts,tsx,cjs,cts,ctsx,mjs,mts,mtsx,css,sass,scss,less,pcss,svg,vue}]
indent_size = 2

# Batch Files
[*.{cmd,bat}]
end_of_line = crlf

# Bash Files
[*.sh]
end_of_line = lf

# Makefiles
[Makefile]
indent_style = tab

##########################################
# Visual Studio Spell Checker
# https://learn.microsoft.com/visualstudio/ide/text-spell-checker
##########################################

# Note that you must have the relevant Windows language pack installed on your machine for this to work.
spelling_languages = en-GB            # NEW
spelling_error_severity = information # NEW
spelling_checkable_types =            # NEW

##########################################
# Default .NET Code Style Severities
# https://learn.microsoft.com/dotnet/fundamentals/code-analysis/configuration-options#scope
##########################################

[*.{cs,csx,cake,vb,vbx}]

# Default Severity for all .NET Code Style rules below
dotnet_analyzer_diagnostic.severity = warning

##########################################
# Language Rules - .NET
# https://learn.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/language-rules
##########################################

[*.{cs,csx,cake,vb,vbx}]

# File header preferences
# file_header_template = <copyright file="{fileName}" company="PROJECT-AUTHOR">\nÂ© PROJECT-AUTHOR\n</copyright>
# If you use StyleCop, you'll need to disable SA1636: File header copyright text should match.
# dotnet_diagnostic.SA1636.severity = none

# Expression-level preferences
dotnet_style_object_initializer = true
dotnet_style_collection_initializer = true
dotnet_style_coalesce_expression = true
dotnet_style_null_propagation = true
dotnet_style_prefer_auto_properties = true
dotnet_style_explicit_tuple_names = true
dotnet_style_prefer_inferred_tuple_names = true
dotnet_style_prefer_inferred_anonymous_type_member_names = true
dotnet_style_prefer_is_null_check_over_reference_equality_method = true
dotnet_style_prefer_conditional_expression_over_assignment = true
dotnet_diagnostic.IDE0045.severity = suggestion
dotnet_style_prefer_conditional_expression_over_return = false
dotnet_diagnostic.IDE0046.severity = suggestion
dotnet_style_prefer_compound_assignment = true
dotnet_style_prefer_simplified_interpolation = true
dotnet_style_prefer_simplified_boolean_expressions = true
dotnet_style_namespace_match_folder = true
dotnet_diagnostic.IDE0130.severity = suggestion
dotnet_style_prefer_foreach_explicit_cast_in_source = when_strongly_typed

# Field preferences
dotnet_style_readonly_field = true # NEW

# Language keyword vs. framework types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true # NEW
dotnet_style_predefined_type_for_member_access = true # NEW

# Modifier preferences
dotnet_style_require_accessibility_modifiers = always # NEW

# Parameter preferences
dotnet_code_quality_unused_parameters = all

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_operators = never_if_unnecessary

# Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = none

# "this."" preferences
dotnet_style_qualification_for_field = false
dotnet_style_qualification_for_property = false
dotnet_style_qualification_for_method = false
dotnet_style_qualification_for_event = false

##########################################
# Language Rules - C#
# https://learn.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/language-rules
##########################################

[*.{cs,csx,cake}]

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace

# Code-block preferences
csharp_prefer_braces = true
csharp_prefer_simple_using_statement = true
dotnet_diagnostic.IDE0063.severity = suggestion
csharp_style_namespace_declarations = file_scoped
csharp_style_prefer_method_group_conversion = true # NEW
csharp_style_prefer_top_level_statements = true # NEW

# Expression-bodied members
csharp_style_expression_bodied_constructors = true
csharp_style_expression_bodied_methods = true
csharp_style_expression_bodied_operators = true
csharp_style_expression_bodied_properties = true
csharp_style_expression_bodied_indexers = true
csharp_style_expression_bodied_accessors = true
csharp_style_expression_bodied_lambdas = true
csharp_style_expression_bodied_local_functions = true

# Expression-level preferences
csharp_style_unused_value_expression_statement_preference = discard_variable
dotnet_diagnostic.IDE0058.severity = suggestion
csharp_style_unused_value_assignment_preference = discard_variable
dotnet_diagnostic.IDE0059.severity = suggestion
csharp_style_throw_expression = true
csharp_style_inlined_variable_declaration = true
csharp_prefer_simple_default_expression = true
csharp_style_prefer_local_over_anonymous_function = true # New
csharp_style_deconstructed_variable_declaration = true
csharp_style_prefer_index_operator = true
csharp_style_prefer_range_operator = true
csharp_style_implicit_object_creation_when_type_is_apparent = true
csharp_style_prefer_null_check_over_type_check = true
csharp_style_prefer_tuple_swap = true # NEW
csharp_style_prefer_utf8_string_literals = true # NEW

# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async
csharp_prefer_static_local_function = true
csharp_style_prefer_readonly_struct = true # NEW
csharp_style_prefer_readonly_struct_member = true # NEW

# "null" checking preferences
csharp_style_conditional_delegate_call = true

# Pattern-matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true
csharp_style_pattern_matching_over_is_with_cast_check = true
csharp_style_prefer_switch_expression = true
csharp_style_prefer_pattern_matching = true
csharp_style_prefer_not_pattern = true
csharp_style_prefer_extended_property_pattern = true # NEW

# 'var' preferences
csharp_style_var_for_built_in_types = true
csharp_style_var_when_type_is_apparent = true
csharp_style_var_elsewhere = true

# Undocumented
# https://github.com/dotnet/docs/issues/28791
csharp_style_prefer_primary_constructors = true # NEW

##########################################
# .NET Coding Conventions - .NET
# https://learn.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/dotnet-formatting-options
##########################################

[*.{cs,csx,cake,vb,vbx}]

# .NET code refactoring options
# https://learn.microsoft.com/visualstudio/ide/reference/code-styles-refactoring-options
dotnet_style_operator_placement_when_wrapping = end_of_line

##########################################
# Formatting Rules - .NET
# https://learn.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/dotnet-formatting-options
##########################################

[*.{cs,csx,cake,vb,vbx}]

# Using directive options
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

##########################################
# Formatting Rules - C#
# https://learn.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/csharp-formatting-options
##########################################

[*.{cs,csx,cake}]

# Newline options
# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#new-line-options
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation options
# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#indentation-options
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = no_change
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents_when_block = false

# Spacing options
# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#spacing-options
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_after_comma = true
csharp_space_before_comma = false
csharp_space_after_dot = false
csharp_space_before_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false

# Wrap options
# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#wrap-options
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = false

##########################################
# .NET Naming Rules
# https://learn.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/naming-rules
##########################################

[*.{cs,csx,cake,vb,vbx}]

##########################################
# Styles
##########################################

# camel_case_style - Define the camelCase style
dotnet_naming_style.camel_case_style.capitalization = camel_case
# pascal_case_style - Define the PascalCase style
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
# first_upper_style - The first character must start with an upper-case character
dotnet_naming_style.first_upper_style.capitalization = first_word_upper
# prefix_interface_with_i_style - Interfaces must be PascalCase and the first character of an interface must be an 'I'
dotnet_naming_style.prefix_interface_with_i_style.capitalization = pascal_case
dotnet_naming_style.prefix_interface_with_i_style.required_prefix = I
# prefix_type_parameters_with_t_style - Generic Type Parameters must be PascalCase and the first character must be a 'T'
dotnet_naming_style.prefix_type_parameters_with_t_style.capitalization = pascal_case
dotnet_naming_style.prefix_type_parameters_with_t_style.required_prefix = T
# disallowed_style - Anything that has this style applied is marked as disallowed
dotnet_naming_style.disallowed_style.capitalization  = pascal_case
dotnet_naming_style.disallowed_style.required_prefix = ____RULE_VIOLATION____
dotnet_naming_style.disallowed_style.required_suffix = ____RULE_VIOLATION____
# internal_error_style - This style should never occur... if it does, it indicates a bug in file or in the parser using the file
dotnet_naming_style.internal_error_style.capitalization  = pascal_case
dotnet_naming_style.internal_error_style.required_prefix = ____INTERNAL_ERROR____
dotnet_naming_style.internal_error_style.required_suffix = ____INTERNAL_ERROR____

##########################################
# .NET Design Guideline Field Naming Rules
# Naming rules for fields follow the .NET Framework design guidelines
# https://learn.microsoft.com/dotnet/standard/design-guidelines/
##########################################

# All public/protected/protected_internal constant fields must be PascalCase
# https://learn.microsoft.com/dotnet/standard/design-guidelines/field
dotnet_naming_symbols.public_protected_constant_fields_group.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.public_protected_constant_fields_group.required_modifiers         = const
dotnet_naming_symbols.public_protected_constant_fields_group.applicable_kinds           = field
dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.symbols    = public_protected_constant_fields_group
dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.severity   = warning

# All public/protected/protected_internal static readonly fields must be PascalCase
# https://learn.microsoft.com/dotnet/standard/design-guidelines/field
dotnet_naming_symbols.public_protected_static_readonly_fields_group.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.public_protected_static_readonly_fields_group.required_modifiers         = static, readonly
dotnet_naming_symbols.public_protected_static_readonly_fields_group.applicable_kinds           = field
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.symbols    = public_protected_static_readonly_fields_group
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.severity   = warning

# No other public/protected/protected_internal fields are allowed
# https://learn.microsoft.com/dotnet/standard/design-guidelines/field
dotnet_naming_symbols.other_public_protected_fields_group.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.other_public_protected_fields_group.applicable_kinds           = field
dotnet_naming_rule.other_public_protected_fields_disallowed_rule.symbols             = other_public_protected_fields_group
dotnet_naming_rule.other_public_protected_fields_disallowed_rule.style               = disallowed_style
dotnet_naming_rule.other_public_protected_fields_disallowed_rule.severity            = error

##########################################
# StyleCop Field Naming Rules
# Naming rules for fields follow the StyleCop analyzers
# This does not override any rules using disallowed_style above
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers
##########################################

# All constant fields must be PascalCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1303.md
dotnet_naming_symbols.stylecop_constant_fields_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected, private
dotnet_naming_symbols.stylecop_constant_fields_group.required_modifiers         = const
dotnet_naming_symbols.stylecop_constant_fields_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.symbols    = stylecop_constant_fields_group
dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.severity   = warning

# All static readonly fields must be PascalCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1311.md
dotnet_naming_symbols.stylecop_static_readonly_fields_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected, private
dotnet_naming_symbols.stylecop_static_readonly_fields_group.required_modifiers         = static, readonly
dotnet_naming_symbols.stylecop_static_readonly_fields_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.symbols    = stylecop_static_readonly_fields_group
dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.severity   = warning

# No non-private instance fields are allowed
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1401.md
dotnet_naming_symbols.stylecop_fields_must_be_private_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected
dotnet_naming_symbols.stylecop_fields_must_be_private_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.symbols               = stylecop_fields_must_be_private_group
dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.style                 = disallowed_style
dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.severity              = error

# Private fields must be camelCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1306.md
dotnet_naming_symbols.stylecop_private_fields_group.applicable_accessibilities = private
dotnet_naming_symbols.stylecop_private_fields_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.symbols     = stylecop_private_fields_group
dotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.style       = camel_case_style
dotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.severity    = warning

# Local variables must be camelCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1312.md
dotnet_naming_symbols.stylecop_local_fields_group.applicable_accessibilities = local
dotnet_naming_symbols.stylecop_local_fields_group.applicable_kinds           = local
dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.symbols     = stylecop_local_fields_group
dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.style       = camel_case_style
dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.severity    = silent

# This rule should never fire.  However, it's included for at least two purposes:
# First, it helps to understand, reason about, and root-case certain types of issues, such as bugs in .editorconfig parsers.
# Second, it helps to raise immediate awareness if a new field type is added (as occurred recently in C#).
dotnet_naming_symbols.sanity_check_uncovered_field_case_group.applicable_accessibilities = *
dotnet_naming_symbols.sanity_check_uncovered_field_case_group.applicable_kinds           = field
dotnet_naming_rule.sanity_check_uncovered_field_case_rule.symbols  = sanity_check_uncovered_field_case_group
dotnet_naming_rule.sanity_check_uncovered_field_case_rule.style    = internal_error_style
dotnet_naming_rule.sanity_check_uncovered_field_case_rule.severity = error


##########################################
# Other Naming Rules
##########################################

# All of the following must be PascalCase:
# - Namespaces
#   https://learn.microsoft.com/dotnet/standard/design-guidelines/names-of-namespaces
#   https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1300.md
# - Classes and Enumerations
#   https://learn.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
#   https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1300.md
# - Delegates
#   https://learn.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces#names-of-common-types
# - Constructors, Properties, Events, Methods
#   https://learn.microsoft.com/dotnet/standard/design-guidelines/names-of-type-members
dotnet_naming_symbols.element_group.applicable_kinds = namespace, class, enum, struct, delegate, event, method, property
dotnet_naming_rule.element_rule.symbols              = element_group
dotnet_naming_rule.element_rule.style                = pascal_case_style
dotnet_naming_rule.element_rule.severity             = warning

# Interfaces use PascalCase and are prefixed with uppercase 'I'
# https://learn.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
dotnet_naming_symbols.interface_group.applicable_kinds = interface
dotnet_naming_rule.interface_rule.symbols              = interface_group
dotnet_naming_rule.interface_rule.style                = prefix_interface_with_i_style
dotnet_naming_rule.interface_rule.severity             = warning

# Generics Type Parameters use PascalCase and are prefixed with uppercase 'T'
# https://learn.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
dotnet_naming_symbols.type_parameter_group.applicable_kinds = type_parameter
dotnet_naming_rule.type_parameter_rule.symbols              = type_parameter_group
dotnet_naming_rule.type_parameter_rule.style                = prefix_type_parameters_with_t_style
dotnet_naming_rule.type_parameter_rule.severity             = warning

# Function parameters use camelCase
# https://learn.microsoft.com/dotnet/standard/design-guidelines/naming-parameters
dotnet_naming_symbols.parameters_group.applicable_kinds = parameter
dotnet_naming_rule.parameters_rule.symbols              = parameters_group
dotnet_naming_rule.parameters_rule.style                = camel_case_style
dotnet_naming_rule.parameters_rule.severity             = warning

##########################################
# License
##########################################
# The following applies as to the .editorconfig file ONLY, and is
# included below for reference, per the requirements of the license
# corresponding to this .editorconfig file.
# See: https://github.com/RehanSaeed/EditorConfig
#
# MIT License
#
# Copyright (c) 2017-2019 Muhammad Rehan Saeed
# Copyright (c) 2019 Henry Gabryjelski
#
# Permission is hereby granted, free of charge, to any
# person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the
# Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute,
# sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject
# to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
##########################################


##########################################
# StyleCop rules
##########################################
[*]
# SA1101: Prefix local calls with this
dotnet_diagnostic.SA1101.severity = none

# SA1200: Using directives should be placed correctly
dotnet_diagnostic.SA1200.severity = none

# SA1633: The file header is missing or not located at the top of the file
dotnet_diagnostic.SA1633.severity = none

# SA1413: The last statement in a multi-line C# initializer or list is missing a trailing comma
dotnet_diagnostic.SA1413.severity = warning

##########################################
# code analysis rules
##########################################

[*.{cs,vb}]
# CA1003: Use generic event handler instances
dotnet_diagnostic.CA1003.severity = warning
dotnet_code_quality.CA1003.api_surface = all
# CA1036: Override methods on comparable types
dotnet_diagnostic.CA1036.severity = warning
# CA1050: Declare types in namespaces
dotnet_diagnostic.CA1050.severity = warning
# CA1052: Static holder types should be Static or NotInheritable
dotnet_diagnostic.CA1052.severity = warning
dotnet_code_quality.CA1052.api_surface = all
# CA1058: Types should not extend certain base types
dotnet_diagnostic.CA1058.severity = warning
# CA1065: Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1065.severity = warning
# CA1067: Override Equals when implementing IEquatable
dotnet_diagnostic.CA1067.severity = warning
# CA1304: Specify CultureInfo
dotnet_diagnostic.CA1304.severity = warning
# CA1305: Specify IFormatProvider
dotnet_diagnostic.CA1305.severity = warning
# CA1307: Specify StringComparison for clarity
dotnet_diagnostic.CA1307.severity = warning
# CA1309: Use ordinal StringComparison
dotnet_diagnostic.CA1309.severity = warning
# CA1310: Specify StringComparison for correctness
dotnet_diagnostic.CA1310.severity = warning
# CA1710: Identifiers should have correct suffix
dotnet_diagnostic.CA1710.severity = warning
dotnet_code_quality.CA1710.api_surface = all
# CA1724: Type names should not match namespaces
dotnet_diagnostic.CA1724.severity = warning
# CA1815: Override equals and operator equals on value types
dotnet_diagnostic.CA1815.severity = warning
# CA1825: Avoid zero-length array allocations
dotnet_diagnostic.CA1825.severity = warning
# CA1829: Use Length/Count property instead of Enumerable.Count method
dotnet_diagnostic.CA1829.severity = warning
# CA1830: Prefer strongly-typed Append and Insert method overloads on StringBuilder
dotnet_diagnostic.CA1830.severity = warning
# CA1834: Use StringBuilder.Append(char) for single character strings
dotnet_diagnostic.CA1834.severity = warning
# CA2201: Do not raise reserved exception types
dotnet_diagnostic.CA2201.severity = warning
# CA2208: Instantiate argument exceptions correctly
dotnet_diagnostic.CA2208.severity = warning
# CA2211: Non-constant fields should not be visible
dotnet_diagnostic.CA2211.severity = warning
# CA2214: Do not call overridable methods in constructors
dotnet_diagnostic.CA2214.severity = warning
# CA2217: Do not mark enums with FlagsAttribute
dotnet_diagnostic.CA2217.severity = warning
# CA2219: Do not raise exceptions in exception clauses
dotnet_diagnostic.CA2219.severity = warning
# CA2242: Test for NaN correctly
dotnet_diagnostic.CA2242.severity = warning
# CA5359: Do not disable certificate validation
dotnet_diagnostic.CA5359.severity = warning

##########################################
# StyleCop rules
##########################################

[*.{cs}]
# MA0001: StringComparison is missing (same as CA1307 & CA1309 & CA1310)
dotnet_diagnostic.MA0001.severity = none
# MA0002: IEqualityComparer<string> or IComparer<string> is missing
dotnet_diagnostic.MA0002.severity = warning
# MA0003: Add parameter name to improve readability
dotnet_diagnostic.MA0003.severity = suggestion
# MA0004: Use Task.ConfigureAwait (same as CA2007)
dotnet_diagnostic.MA0004.severity = warning
# MA0005: Use Array.Empty<T>() (same as CA1825)
dotnet_diagnostic.MA0005.severity = none
# MA0006: Use String.Equals instead of equality operator
dotnet_diagnostic.MA0006.severity = warning
# MA0007: Add a comma after the last value (same as SA1413)
dotnet_diagnostic.MA0007.severity = none
# MA0008: Add StructLayoutAttribute
dotnet_diagnostic.MA0008.severity = warning
# MA0009: Add regex evaluation timeout
dotnet_diagnostic.MA0009.severity = warning

# MA0010: Mark attributes with AttributeUsageAttribute
dotnet_diagnostic.MA0010.severity = warning
# MA0011: IFormatProvider is missing (same as CA1304 & CA1305)
dotnet_diagnostic.MA0011.severity = none
# MA0012: Do not raise reserved exception type (same as CA2201)
dotnet_diagnostic.MA0012.severity = none
# MA0013: Types should not extend System.ApplicationException (same as CA1058)
dotnet_diagnostic.MA0013.severity = none
# MA0014: Do not raise System.ApplicationException type (same as CA2201)
dotnet_diagnostic.MA0014.severity = none
# MA0015: Specify the parameter name in ArgumentException (same as CA2208)
dotnet_diagnostic.MA0015.severity = none          
# MA0016: Prefer using collection abstraction instead of implementation
dotnet_diagnostic.MA0016.severity = warning
# MA0017: Abstract types should not have public or internal constructors
dotnet_diagnostic.MA0017.severity = warning
# MA0018: Do not declare static members on generic types (deprecated; use CA1000 instead)
dotnet_diagnostic.MA0018.severity = none
# MA0019: Use EventArgs.Empty
dotnet_diagnostic.MA0019.severity = warning

# MA0020: Use direct methods instead of LINQ methods (same as CA1829)
dotnet_diagnostic.MA0020.severity = none
# MA0021: Use StringComparer.GetHashCode instead of string.GetHashCode
dotnet_diagnostic.MA0021.severity = warning
# MA0022: Return Task.FromResult instead of returning null
dotnet_diagnostic.MA0022.severity = warning
# MA0023: Add RegexOptions.ExplicitCapture
dotnet_diagnostic.MA0023.severity = warning
# MA0024: Use an explicit StringComparer when possible
dotnet_diagnostic.MA0024.severity = warning
# MA0025: Implement the functionality instead of throwing NotImplementedException
dotnet_diagnostic.MA0025.severity = warning
# MA0026: Fix TODO comment
dotnet_diagnostic.MA0026.severity = warning
# MA0027: Prefer rethrowing an exception implicitly (same as CA2200)
dotnet_diagnostic.MA0027.severity = none
# MA0028: Optimize StringBuilder usage (same as CA1830 & CA1834)
dotnet_diagnostic.MA0028.severity = none
# MA0029: Combine LINQ methods
dotnet_diagnostic.MA0029.severity = suggestion

# MA0030: Remove useless OrderBy call
dotnet_diagnostic.MA0030.severity = warning
# MA0031: Optimize Enumerable.Count() usage
dotnet_diagnostic.MA0031.severity = suggestion
# MA0032: Use an overload with a CancellationToken argument
dotnet_diagnostic.MA0032.severity = none
# MA0033: Do not tag instance fields with ThreadStaticAttribute
dotnet_diagnostic.MA0033.severity = warning
# MA0034:
dotnet_diagnostic.MA0034.severity = none
# MA0035: Do not use dangerous threading methods
dotnet_diagnostic.MA0035.severity = warning
# MA0036: Make class static (same as CA1052)
dotnet_diagnostic.MA0036.severity = none
# MA0037: Remove empty statement
dotnet_diagnostic.MA0037.severity = error
# MA0038: Make method static (deprecated, use CA1822 instead)
dotnet_diagnostic.MA0038.severity = none
# MA0039: Do not write your own certificate validation method (same as CA5359)
dotnet_diagnostic.MA0039.severity = none

# MA0040: Forward the CancellationToken parameter to methods that take one
dotnet_diagnostic.MA0040.severity = suggestion
# MA0041: Make property static (deprecated, use CA1822 instead)
dotnet_diagnostic.MA0041.severity = none
# MA0042: Do not use blocking calls in an async method
dotnet_diagnostic.MA0042.severity = suggestion
# MA0043: Use nameof operator in ArgumentException
dotnet_diagnostic.MA0043.severity = suggestion
# MA0044: Remove useless ToString call
dotnet_diagnostic.MA0044.severity = suggestion
# MA0045: Do not use blocking calls in a sync method (need to make calling method async)
dotnet_diagnostic.MA0045.severity = none
# MA0046: Use EventHandler<T> to declare events (same as CA1003)
dotnet_diagnostic.MA0046.severity = none
# MA0047: Declare types in namespaces (same as CA1050)
dotnet_diagnostic.MA0047.severity = none
# MA0048: File name must match type name (same as SA1649)
dotnet_diagnostic.MA0048.severity = none
# MA0049: Type name should not match containing namespace (same as CA1724)
dotnet_diagnostic.MA0049.severity = none

# MA0050: Validate arguments correctly in iterator methods
dotnet_diagnostic.MA0050.severity = suggestion
# MA0051: Method is too long
dotnet_diagnostic.MA0051.severity = warning
# MA0052: Replace constant Enum.ToString with nameof
dotnet_diagnostic.MA0052.severity = suggestion
# MA0053: Make class sealed
dotnet_diagnostic.MA0053.severity = suggestion
# MA0054: Embed the caught exception as innerException
dotnet_diagnostic.MA0054.severity = warning
# MA0055: Do not use finalizer
dotnet_diagnostic.MA0055.severity = warning
# MA0056: Do not call overridable members in constructor (same as CA2214)
dotnet_diagnostic.MA0056.severity = none
# MA0057: Class name should end with 'Attribute' (same as CA1710)
dotnet_diagnostic.MA0057.severity = none
# MA0058: Class name should end with 'Exception' (same as CA1710)
dotnet_diagnostic.MA0058.severity = none
# MA0059: Class name should end with 'EventArgs' (same as CA1710)
dotnet_diagnostic.MA0059.severity = none

# MA0060: The value returned by Stream.Read/Stream.ReadAsync is not used
dotnet_diagnostic.MA0060.severity = warning
# MA0061: Method overrides should not change default values
dotnet_diagnostic.MA0061.severity = warning
# MA0062: Non-flags enums should not be marked with "FlagsAttribute" (same as CA2217)
dotnet_diagnostic.MA0062.severity = none
# MA0063: Use Where before OrderBy
dotnet_diagnostic.MA0063.severity = suggestion
# MA0064: Avoid locking on publicly accessible instance
dotnet_diagnostic.MA0064.severity = warning
# MA0065: Default ValueType.Equals or HashCode is used for struct equality (same as CA1815)
dotnet_diagnostic.MA0065.severity = none
# MA0066: Hash table unfriendly type is used in a hash table (same as CA1815)
dotnet_diagnostic.MA0066.severity = none
# MA0067: Use Guid.Empty
dotnet_diagnostic.MA0067.severity = suggestion
# MA0068: Invalid parameter name for nullable attribute
dotnet_diagnostic.MA0068.severity = warning
# MA0069: Non-constant static fields should not be visible (same as CA2211)
dotnet_diagnostic.MA0069.severity = none

# MA0070: Obsolete attributes should include explanations
dotnet_diagnostic.MA0070.severity = warning
# MA0071: Avoid using redundant else
dotnet_diagnostic.MA0071.severity = suggestion
# MA0072: Do not throw from a finally block (same as CA1065 & CA2219)
dotnet_diagnostic.MA0072.severity = none
# MA0073: Avoid comparison with bool constant
dotnet_diagnostic.MA0073.severity = suggestion
# MA0074: Avoid implicit culture-sensitive methods (same as CA1307 & CA1309)
dotnet_diagnostic.MA0074.severity = none
# MA0075: Do not use implicit culture-sensitive ToString
dotnet_diagnostic.MA0075.severity = suggestion
# MA0076: Do not use implicit culture-sensitive ToString in interpolated strings
dotnet_diagnostic.MA0076.severity = suggestion
# MA0077: A class that provides Equals(T) should implement IEquatable<T>
dotnet_diagnostic.MA0077.severity = warning
# MA0078: Use 'Cast' instead of 'Select' to cast
dotnet_diagnostic.MA0078.severity = suggestion
# MA0079: Forward the CancellationToken using .WithCancellation()
dotnet_diagnostic.MA0079.severity = suggestion

# MA0080: Use a cancellation token using .WithCancellation()
dotnet_diagnostic.MA0080.severity = none
# MA0081: Method overrides should not omit params keyword
dotnet_diagnostic.MA0081.severity = warning
# MA0082: NaN should not be used in comparisons (same as CA2242)
dotnet_diagnostic.MA0082.severity = none
# MA0083: ConstructorArgument parameters should exist in constructors
dotnet_diagnostic.MA0083.severity = warning
# MA0084: Local variables should not hide other symbols
dotnet_diagnostic.MA0084.severity = warning
# MA0085: Anonymous delegates should not be used to unsubscribe from Events
dotnet_diagnostic.MA0085.severity = warning
# MA0086: Do not throw from a finalizer (same as CA1065)
dotnet_diagnostic.MA0086.severity = none
# MA0087: Parameters with [DefaultParameterValue] attributes should also be marked [Optional]
dotnet_diagnostic.MA0087.severity = warning
# MA0088: Use [DefaultParameterValue] instead of [DefaultValue]
dotnet_diagnostic.MA0088.severity = warning
# MA0089: Optimize string method usage
dotnet_diagnostic.MA0089.severity = suggestion

# MA0090: Remove empty else/finally block
dotnet_diagnostic.MA0090.severity = suggestion
# MA0091: Sender should be 'this' for instance events
dotnet_diagnostic.MA0091.severity = warning
# MA0092: Sender should be 'null' for static events
dotnet_diagnostic.MA0092.severity = warning
# MA0093: EventArgs should not be null
dotnet_diagnostic.MA0093.severity = warning
# MA0094: A class that provides CompareTo(T) should implement IComparable<T>
dotnet_diagnostic.MA0094.severity = warning
# MA0095: A class that implements IEquatable<T> should override Equals(object) (same as CA1067)
dotnet_diagnostic.MA0095.severity = none
# MA0096: A class that implements IComparable<T> should also implement IEquatable<T>
dotnet_diagnostic.MA0096.severity = warning
# MA0097: A class that implements IComparable<T> or IComparable should override comparison operators (same as CA1036)
dotnet_diagnostic.MA0097.severity = none
# MA0098: Use indexer instead of LINQ methods
dotnet_diagnostic.MA0098.severity = suggestion
# MA0099: Use Explicit enum value instead of 0
dotnet_diagnostic.MA0099.severity = warning

# MA0100: Await task before disposing of resources
dotnet_diagnostic.MA0100.severity = warning
# MA0101: String contains an implicit end of line character
dotnet_diagnostic.MA0101.severity = silent
# MA0102: Make member readonly
dotnet_diagnostic.MA0102.severity = suggestion
# MA0103: Use SequenceEqual instead of equality operator
dotnet_diagnostic.MA0103.severity = warning
# MA0104: Do not create a type with a name from the BCL
dotnet_diagnostic.MA0104.severity = none
# MA0105: Use the lambda parameters instead of using a closure
dotnet_diagnostic.MA0105.severity = suggestion
# MA0106: Avoid closure by using an overload with the 'factoryArgument' parameter
dotnet_diagnostic.MA0106.severity = suggestion
# MA0107: Do not use culture-sensitive object.ToString
dotnet_diagnostic.MA0107.severity = none
# MA0108: Remove redundant argument value
dotnet_diagnostic.MA0108.severity = suggestion
# MA0109: Consider adding an overload with a Span<T> or Memory<T>
dotnet_diagnostic.MA0109.severity = none

# MA0110: Use the Regex source generator
dotnet_diagnostic.MA0110.severity = suggestion
# MA0111: Use string.Create instead of FormattableString
dotnet_diagnostic.MA0111.severity = suggestion
# MA0112: Use 'Count > 0' instead of 'Any()'
dotnet_diagnostic.MA0112.severity = none
# MA0113: Use DateTime.UnixEpoch
dotnet_diagnostic.MA0113.severity = suggestion
# MA0114: Use DateTimeOffset.UnixEpoch
dotnet_diagnostic.MA0114.severity = suggestion
# MA0115: Unknown component parameter
dotnet_diagnostic.MA0115.severity = warning
# MA0116: Parameters with [SupplyParameterFromQuery] attributes should also be marked as [Parameter]
dotnet_diagnostic.MA0116.severity = warning
# MA0117: Parameters with [EditorRequired] attributes should also be marked as [Parameter]
dotnet_diagnostic.MA0117.severity = warning
# MA0118: [JSInvokable] methods must be public
dotnet_diagnostic.MA0118.severity = warning
# MA0119: JSRuntime must not be used in OnInitialized or OnInitializedAsync
dotnet_diagnostic.MA0119.severity = warning

# MA0120: Use InvokeVoidAsync when the returned value is not used
dotnet_diagnostic.MA0120.severity = suggestion
# MA0121: Do not overwrite parameter value
dotnet_diagnostic.MA0121.severity = none
# MA0122: Parameters with [SupplyParameterFromQuery] attributes are only valid in routable components (@page)
dotnet_diagnostic.MA0122.severity = suggestion
# MA0123: Sequence number must be a constant
dotnet_diagnostic.MA0123.severity = warning
# MA0124: Log Parameter type is not valid
dotnet_diagnostic.MA0124.severity = warning
# MA0125: The list of log parameter types contains an invalid type
dotnet_diagnostic.MA0125.severity = warning
# MA0126: The list of log parameter types contains a duplicate
dotnet_diagnostic.MA0126.severity = warning
# MA0127: Use String.Equals instead of is pattern
dotnet_diagnostic.MA0127.severity = none
# MA0128: Use 'is' operator instead of SequenceEqual 
dotnet_diagnostic.MA0128.severity = suggestion
# MA0129: Await task in using statement
dotnet_diagnostic.MA0129.severity = warning

# MA0130: GetType() should not be used on System.Type instances
dotnet_diagnostic.MA0130.severity = warning
# MA0131: ArgumentNullException.ThrowIfNull should not be used with non-nullable types
dotnet_diagnostic.MA0131.severity = warning
# MA0132: Do not convert implicitly to DateTimeOffset
dotnet_diagnostic.MA0132.severity = warning
# MA0133: Use DateTimeOffset instead of relying on the implicit conversion
dotnet_diagnostic.MA0133.severity = suggestion
# MA0134: Observe result of async calls
dotnet_diagnostic.MA0134.severity = warning
# MA0135: The log parameter has no configured type
dotnet_diagnostic.MA0135.severity = none
# MA0136: Raw String contains an implicit end of line character
dotnet_diagnostic.MA0136.severity = silent
# MA0137: Use 'Async' suffix when a method returns an awaitable type
dotnet_diagnostic.MA0137.severity = none
# MA0138: Do not use 'Async' suffix when a method does not return an awaitable type
dotnet_diagnostic.MA0138.severity = none
# MA0139: Log Parameter type is not valid
dotnet_diagnostic.MA0139.severity = warning

# MA0140: Both if and else branch have identical code
dotnet_diagnostic.MA0140.severity = warning
# MA0141: Use pattern matching instead of inequality operators for null check
dotnet_diagnostic.MA0141.severity = none
# MA0142: Use pattern matching instead of equality operators for null check
dotnet_diagnostic.MA0142.severity = none
# MA0143: Primary constructor parameters should be readonly
dotnet_diagnostic.MA0143.severity = warning
# MA0144: Use System.OperatingSystem to check the current OS
dotnet_diagnostic.MA0144.severity = warning
# MA0145: Signature for [UnsafeAccessorAttribute] method is not valid
dotnet_diagnostic.MA0145.severity = warning
# MA0146: Name must be set explicitly on local functions
dotnet_diagnostic.MA0146.severity = warning
# MA0147: Avoid async void method for delegate
dotnet_diagnostic.MA0147.severity = warning
# MA0148: Use pattern matching instead of equality operators for discrete value
dotnet_diagnostic.MA0148.severity = none
# MA0149: Use pattern matching instead of inequality operators for discrete value
dotnet_diagnostic.MA0149.severity = none

# MA0150: Do not call the default object.ToString explicitly
dotnet_diagnostic.MA0150.severity = warning
# MA0151: DebuggerDisplay must contain valid members
dotnet_diagnostic.MA0151.severity = warning
# MA0152: Use Unwrap instead of using await twice
dotnet_diagnostic.MA0152.severity = suggestion
# MA0153: Do not log symbols decorated with DataClassificationAttribute directly
dotnet_diagnostic.MA0153.severity = warning
