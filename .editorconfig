# Version: 4.0.0 (Using https://semver.org/)
# Updated: 2021-08-09
# See https://github.com/RehanSaeed/EditorConfig/releases for release notes.
# See https://github.com/RehanSaeed/EditorConfig for updates to this file.
# See http://EditorConfig.org for more information about .editorconfig files.

##########################################
# Common Settings
##########################################

# This file is the top-most EditorConfig file
root = true

# All Files
[*]
charset = utf-8-bom
indent_style = space
indent_size = 4
insert_final_newline = false
trim_trailing_whitespace = true

##########################################
# File Extension Settings
##########################################

# Visual Studio Solution Files
[*.sln]
indent_style = tab

# Visual Studio XML Project Files
[*.{csproj,vbproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML Configuration Files
[*.{xml,config,props,targets,nuspec,resx,ruleset,vsixmanifest,vsct}]
indent_size = 2

# JSON Files
[*.{json,json5,webmanifest}]
indent_size = 2

# YAML Files
[*.{yml,yaml}]
indent_size = 2

# Markdown Files
[*.md]
trim_trailing_whitespace = false

# Web Files
[*.{htm,html,js,jsm,ts,tsx,css,sass,scss,less,pcss,svg,vue}]
indent_size = 2

# Batch Files
[*.{cmd,bat}]
end_of_line = crlf

# Bash Files
[*.sh]
end_of_line = lf

# Makefiles
[Makefile]
indent_style = tab

##########################################
# Default .NET Code Style Severities
# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/configuration-options#scope
##########################################

[*.{cs,csx,cake,vb,vbx}]
# Default Severity for all .NET Code Style rules below
dotnet_analyzer_diagnostic.severity = warning

##########################################
# Language Rules
# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/language-rules
##########################################

# .NET Style Rules
# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/language-rules#net-style-rules
[*.{cs,csx,cake,vb,vbx}]
# "this." and "Me." qualifiers
dotnet_style_qualification_for_field = false:warning
dotnet_style_qualification_for_property = false:warning
dotnet_style_qualification_for_method = false:warning
dotnet_style_qualification_for_event = false:warning
# Language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning
# Modifier preferences
dotnet_style_require_accessibility_modifiers = always:warning
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:warning
visual_basic_preferred_modifier_order = Partial,Default,Private,Protected,Public,Friend,NotOverridable,Overridable,MustOverride,Overloads,Overrides,MustInherit,NotInheritable,Static,Shared,Shadows,ReadOnly,WriteOnly,Dim,Const,WithEvents,Widening,Narrowing,Custom,Async:warning
dotnet_style_readonly_field = true:warning
# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:warning
# Expression-level preferences
dotnet_style_object_initializer = true:warning
dotnet_style_collection_initializer = true:warning
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_prefer_inferred_tuple_names = true:warning
dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_diagnostic.IDE0045.severity = suggestion
dotnet_style_prefer_conditional_expression_over_return = false:suggestion
dotnet_diagnostic.IDE0046.severity = suggestion
dotnet_style_prefer_compound_assignment = true:warning
dotnet_style_prefer_simplified_interpolation = true:warning
dotnet_style_prefer_simplified_boolean_expressions = true:warning
# Null-checking preferences
dotnet_style_coalesce_expression = true:warning
dotnet_style_null_propagation = true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
# File header preferences
# file_header_template = <copyright file="{fileName}" company="PROJECT-AUTHOR">\n© PROJECT-AUTHOR\n</copyright>
# If you use StyleCop, you'll need to disable SA1636: File header copyright text should match.
dotnet_diagnostic.SA1636.severity = none
# Undocumented
dotnet_style_operator_placement_when_wrapping = end_of_line:warning
csharp_style_prefer_null_check_over_type_check = true:warning
dotnet_style_namespace_match_folder = true:suggestion
dotnet_diagnostic.IDE0130.severity = suggestion

# C# Style Rules
# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/language-rules#c-style-rules
[*.{cs,csx,cake}]
# 'var' preferences
csharp_style_var_for_built_in_types = true:warning
csharp_style_var_when_type_is_apparent = true:warning
csharp_style_var_elsewhere = true:warning
dotnet_diagnostic.IDE0008.severity =none
# Expression-bodied members
csharp_style_expression_bodied_methods = true:warning
csharp_style_expression_bodied_constructors = true:warning
csharp_style_expression_bodied_operators = true:warning
csharp_style_expression_bodied_properties = true:warning
csharp_style_expression_bodied_indexers = true:warning
csharp_style_expression_bodied_accessors = true:warning
csharp_style_expression_bodied_lambdas = true:warning
csharp_style_expression_bodied_local_functions = true:warning
# Pattern matching preferences
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_prefer_switch_expression = true:warning
csharp_style_prefer_pattern_matching = true:warning
csharp_style_prefer_not_pattern = true:warning
# Expression-level preferences
csharp_style_inlined_variable_declaration = true:warning
csharp_prefer_simple_default_expression = true:warning
csharp_style_pattern_local_over_anonymous_function = true:warning
csharp_style_deconstructed_variable_declaration = true:warning
csharp_style_prefer_index_operator = true:warning
csharp_style_prefer_range_operator = true:warning
csharp_style_implicit_object_creation_when_type_is_apparent = true:warning
# Convert anonymous type to tuple
dotnet_diagnostic.IDE0050.severity = suggestion
# "Null" checking preferences
csharp_style_throw_expression = true:warning
csharp_style_conditional_delegate_call = true:warning
# Code block preferences
csharp_prefer_braces = true:warning
csharp_prefer_simple_using_statement = true:suggestion
dotnet_diagnostic.IDE0063.severity = warning
# 'using' directive preferences
csharp_using_directive_placement=outside_namespace:warning
# Modifier preferences
csharp_prefer_static_local_function = true:warning
# Undocumented
csharp_style_namespace_declarations = file_scoped:warning

##########################################
# Unnecessary Code Rules
# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/unnecessary-code-rules
##########################################

# .NET Unnecessary code rules
[*.{cs,csx,cake,vb,vbx}]
dotnet_code_quality_unused_parameters = all:warning
dotnet_remove_unnecessary_suppression_exclusions = none:warning
dotnet_diagnostic.RemoveUnnecessaryImportsFixable.severity = warning

# C# Unnecessary code rules
[*.{cs,csx,cake}]
csharp_style_unused_value_expression_statement_preference = discard_variable:suggestion
dotnet_diagnostic.IDE0058.severity = suggestion
csharp_style_unused_value_assignment_preference = discard_variable:suggestion
dotnet_diagnostic.IDE0059.severity = suggestion

##########################################
# Formatting Rules
# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/formatting-rules
##########################################

# .NET formatting rules
# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#net-formatting-rules
[*.{cs,csx,cake,vb,vbx}]
# Organize using directives
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

# C# formatting rules
# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#c-formatting-rules
[*.{cs,csx,cake}]
# Newline options
# https://docs.microsoft.com/visualstudio/ide/editorconfig-formatting-conventions#new-line-options
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true
# Indentation options
# https://docs.microsoft.com/visualstudio/ide/editorconfig-formatting-conventions#indentation-options
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = no_change
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents_when_block = false
# Spacing options
# https://docs.microsoft.com/visualstudio/ide/editorconfig-formatting-conventions#spacing-options
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_after_comma = true
csharp_space_before_comma = false
csharp_space_after_dot = false
csharp_space_before_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false
# Wrap options
# https://docs.microsoft.com/visualstudio/ide/editorconfig-formatting-conventions#wrap-options
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = false

##########################################
# .NET Naming Rules
# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/naming-rules
##########################################

[*.{cs,csx,cake,vb,vbx}]

##########################################
# Styles
##########################################

# camel_case_style - Define the camelCase style
dotnet_naming_style.camel_case_style.capitalization = camel_case
# pascal_case_style - Define the PascalCase style
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
# first_upper_style - The first character must start with an upper-case character
dotnet_naming_style.first_upper_style.capitalization = first_word_upper
# prefix_interface_with_i_style - Interfaces must be PascalCase and the first character of an interface must be an 'I'
dotnet_naming_style.prefix_interface_with_i_style.capitalization = pascal_case
dotnet_naming_style.prefix_interface_with_i_style.required_prefix = I
# prefix_type_parameters_with_t_style - Generic Type Parameters must be PascalCase and the first character must be a 'T'
dotnet_naming_style.prefix_type_parameters_with_t_style.capitalization = pascal_case
dotnet_naming_style.prefix_type_parameters_with_t_style.required_prefix = T
# disallowed_style - Anything that has this style applied is marked as disallowed
dotnet_naming_style.disallowed_style.capitalization  = pascal_case
dotnet_naming_style.disallowed_style.required_prefix = ____RULE_VIOLATION____
dotnet_naming_style.disallowed_style.required_suffix = ____RULE_VIOLATION____
# internal_error_style - This style should never occur... if it does, it indicates a bug in file or in the parser using the file
dotnet_naming_style.internal_error_style.capitalization  = pascal_case
dotnet_naming_style.internal_error_style.required_prefix = ____INTERNAL_ERROR____
dotnet_naming_style.internal_error_style.required_suffix = ____INTERNAL_ERROR____

##########################################
# .NET Design Guideline Field Naming Rules
# Naming rules for fields follow the .NET Framework design guidelines
# https://docs.microsoft.com/dotnet/standard/design-guidelines/index
##########################################

# All public/protected/protected_internal constant fields must be PascalCase
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
dotnet_naming_symbols.public_protected_constant_fields_group.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.public_protected_constant_fields_group.required_modifiers         = const
dotnet_naming_symbols.public_protected_constant_fields_group.applicable_kinds           = field
dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.symbols    = public_protected_constant_fields_group
dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.severity   = warning

# All public/protected/protected_internal static readonly fields must be PascalCase
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
dotnet_naming_symbols.public_protected_static_readonly_fields_group.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.public_protected_static_readonly_fields_group.required_modifiers         = static, readonly
dotnet_naming_symbols.public_protected_static_readonly_fields_group.applicable_kinds           = field
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.symbols    = public_protected_static_readonly_fields_group
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.severity   = warning

# No other public/protected/protected_internal fields are allowed
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
dotnet_naming_symbols.other_public_protected_fields_group.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.other_public_protected_fields_group.applicable_kinds           = field
dotnet_naming_rule.other_public_protected_fields_disallowed_rule.symbols             = other_public_protected_fields_group
dotnet_naming_rule.other_public_protected_fields_disallowed_rule.style               = disallowed_style
dotnet_naming_rule.other_public_protected_fields_disallowed_rule.severity            = error

##########################################
# StyleCop Field Naming Rules
# Naming rules for fields follow the StyleCop analyzers
# This does not override any rules using disallowed_style above
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers
##########################################

# All constant fields must be PascalCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1303.md
dotnet_naming_symbols.stylecop_constant_fields_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected, private
dotnet_naming_symbols.stylecop_constant_fields_group.required_modifiers         = const
dotnet_naming_symbols.stylecop_constant_fields_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.symbols    = stylecop_constant_fields_group
dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.severity   = warning

# All static readonly fields must be PascalCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1311.md
dotnet_naming_symbols.stylecop_static_readonly_fields_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected, private
dotnet_naming_symbols.stylecop_static_readonly_fields_group.required_modifiers         = static, readonly
dotnet_naming_symbols.stylecop_static_readonly_fields_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.symbols    = stylecop_static_readonly_fields_group
dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.severity   = warning

# No non-private instance fields are allowed
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1401.md
dotnet_naming_symbols.stylecop_fields_must_be_private_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected
dotnet_naming_symbols.stylecop_fields_must_be_private_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.symbols               = stylecop_fields_must_be_private_group
dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.style                 = disallowed_style
dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.severity              = error

# Private fields must be camelCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1306.md
dotnet_naming_symbols.stylecop_private_fields_group.applicable_accessibilities = private
dotnet_naming_symbols.stylecop_private_fields_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.symbols     = stylecop_private_fields_group
dotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.style       = camel_case_style
dotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.severity    = warning

# Local variables must be camelCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1312.md
dotnet_naming_symbols.stylecop_local_fields_group.applicable_accessibilities = local
dotnet_naming_symbols.stylecop_local_fields_group.applicable_kinds           = local
dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.symbols     = stylecop_local_fields_group
dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.style       = camel_case_style
dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.severity    = silent

# This rule should never fire.  However, it's included for at least two purposes:
# First, it helps to understand, reason about, and root-case certain types of issues, such as bugs in .editorconfig parsers.
# Second, it helps to raise immediate awareness if a new field type is added (as occurred recently in C#).
dotnet_naming_symbols.sanity_check_uncovered_field_case_group.applicable_accessibilities = *
dotnet_naming_symbols.sanity_check_uncovered_field_case_group.applicable_kinds           = field
dotnet_naming_rule.sanity_check_uncovered_field_case_rule.symbols  = sanity_check_uncovered_field_case_group
dotnet_naming_rule.sanity_check_uncovered_field_case_rule.style    = internal_error_style
dotnet_naming_rule.sanity_check_uncovered_field_case_rule.severity = error


##########################################
# Other Naming Rules
##########################################

# All of the following must be PascalCase:
# - Namespaces
#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-namespaces
#   https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1300.md
# - Classes and Enumerations
#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
#   https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1300.md
# - Delegates
#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces#names-of-common-types
# - Constructors, Properties, Events, Methods
#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-type-members
dotnet_naming_symbols.element_group.applicable_kinds = namespace, class, enum, struct, delegate, event, method, property
dotnet_naming_rule.element_rule.symbols              = element_group
dotnet_naming_rule.element_rule.style                = pascal_case_style
dotnet_naming_rule.element_rule.severity             = warning

# Interfaces use PascalCase and are prefixed with uppercase 'I'
# https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
dotnet_naming_symbols.interface_group.applicable_kinds = interface
dotnet_naming_rule.interface_rule.symbols              = interface_group
dotnet_naming_rule.interface_rule.style                = prefix_interface_with_i_style
dotnet_naming_rule.interface_rule.severity             = warning

# Generics Type Parameters use PascalCase and are prefixed with uppercase 'T'
# https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
dotnet_naming_symbols.type_parameter_group.applicable_kinds = type_parameter
dotnet_naming_rule.type_parameter_rule.symbols              = type_parameter_group
dotnet_naming_rule.type_parameter_rule.style                = prefix_type_parameters_with_t_style
dotnet_naming_rule.type_parameter_rule.severity             = warning

# Function parameters use camelCase
# https://docs.microsoft.com/dotnet/standard/design-guidelines/naming-parameters
dotnet_naming_symbols.parameters_group.applicable_kinds = parameter
dotnet_naming_rule.parameters_rule.symbols              = parameters_group
dotnet_naming_rule.parameters_rule.style                = camel_case_style
dotnet_naming_rule.parameters_rule.severity             = warning

##########################################
# License
##########################################
# The following applies as to the .editorconfig file ONLY, and is
# included below for reference, per the requirements of the license
# corresponding to this .editorconfig file.
# See: https://github.com/RehanSaeed/EditorConfig
#
# MIT License
#
# Copyright (c) 2017-2019 Muhammad Rehan Saeed
# Copyright (c) 2019 Henry Gabryjelski
#
# Permission is hereby granted, free of charge, to any
# person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the
# Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute,
# sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject
# to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
##########################################


##########################################
# StyleCop rules
##########################################
[*]
# SA0001: XML comment analysis disabled
#dotnet_diagnostic.SA0001.severity =silent

# SA1101: Prefix local calls with this
dotnet_diagnostic.SA1101.severity =none

# SA1200: Using directives should be placed correctly
dotnet_diagnostic.SA1200.severity =none

# SA1633: The file header is missing or not located at the top of the file
dotnet_diagnostic.SA1633.severity =none


##########################################
# Meziantou.Analyzer
##########################################
dotnet_diagnostic.MA0001.severity = warning    # MA0001: StringComparison is missing
dotnet_diagnostic.MA0002.severity = warning    # MA0002: IEqualityComparer<string> or IComparer<string> is missing
dotnet_diagnostic.MA0003.severity = none       # MA0003: Add argument name to improve readability
dotnet_diagnostic.MA0004.severity = warning    # MA0004: Use Task.ConfigureAwait(false)
dotnet_diagnostic.MA0005.severity = warning    # MA0005: Use Array.Empty<T>()
dotnet_diagnostic.MA0006.severity = warning    # MA0006: Use String.Equals instead of equality operator
dotnet_diagnostic.MA0007.severity = warning    # MA0007: Add a comma after the last value
dotnet_diagnostic.MA0008.severity = warning    # MA0008: Add StructLayoutAttribute
dotnet_diagnostic.MA0009.severity = warning    # MA0009: Add regex evaluation timeout
dotnet_diagnostic.MA0010.severity = warning    # MA0010: Mark attributes with AttributeUsageAttribute
dotnet_diagnostic.MA0011.severity = warning    # MA0011: IFormatProvider is missing
dotnet_diagnostic.MA0012.severity = warning    # MA0012: Do not raise reserved exception type
dotnet_diagnostic.MA0013.severity = warning    # MA0013: Types should not extend System.ApplicationException
dotnet_diagnostic.MA0014.severity = warning    # MA0014: Do not raise System.ApplicationException type
dotnet_diagnostic.MA0015.severity = warning    # MA0015: Specify the parameter name in ArgumentException
dotnet_diagnostic.MA0016.severity = warning    # MA0016: Prefer return collection abstraction instead of implementation
dotnet_diagnostic.MA0017.severity = warning    # MA0017: Abstract types should not have public or internal constructors
dotnet_diagnostic.MA0018.severity = warning    # MA0018: Do not declare static members on generic types
dotnet_diagnostic.MA0019.severity = warning    # MA0019: Use EventArgs.Empty
dotnet_diagnostic.MA0020.severity = warning    # MA0020: Use direct methods instead of LINQ methods
dotnet_diagnostic.MA0021.severity = warning    # MA0021: Use StringComparer.GetHashCode instead of string.GetHashCode
dotnet_diagnostic.MA0022.severity = warning    # MA0022: Return Task.FromResult instead of returning null
dotnet_diagnostic.MA0023.severity = warning    # MA0023: Add RegexOptions.ExplicitCapture
dotnet_diagnostic.MA0024.severity = warning    # MA0024: Use an explicit StringComparer when possible
dotnet_diagnostic.MA0025.severity = warning    # MA0025: Implement the functionality instead of throwing NotImplementedException
dotnet_diagnostic.MA0026.severity = none       # MA0026: Fix TODO comment
dotnet_diagnostic.MA0027.severity = warning    # MA0027: Do not remove original exception
dotnet_diagnostic.MA0028.severity = warning    # MA0028: Optimize StringBuilder usage
dotnet_diagnostic.MA0029.severity = warning    # MA0029: Combine LINQ methods
dotnet_diagnostic.MA0030.severity = warning    # MA0030: Remove useless OrderBy call
dotnet_diagnostic.MA0031.severity = warning    # MA0031: Optimize Enumerable.Count() usage
dotnet_diagnostic.MA0032.severity = suggestion    # MA0032: Use an overload with a CancellationToken argument
dotnet_diagnostic.MA0033.severity = warning    # MA0033: Do not tag instance fields with ThreadStaticAttribute
dotnet_diagnostic.MA0035.severity = warning    # MA0035: Do not use dangerous threading methods
dotnet_diagnostic.MA0036.severity = warning    # MA0036: Make class static
dotnet_diagnostic.MA0037.severity = warning    # MA0037: Remove empty statement
dotnet_diagnostic.MA0038.severity = warning    # MA0038: Make method static
dotnet_diagnostic.MA0039.severity = warning    # MA0039: Do not write your own certificate validation method
dotnet_diagnostic.MA0040.severity = warning    # MA0040: Flow the cancellation token
dotnet_diagnostic.MA0041.severity = warning    # MA0041: Make property static
dotnet_diagnostic.MA0042.severity = warning    # MA0042: Do not use blocking calls in an async method
dotnet_diagnostic.MA0043.severity = warning    # MA0043: Use nameof operator in ArgumentException
dotnet_diagnostic.MA0044.severity = warning    # MA0044: Remove useless ToString call
dotnet_diagnostic.MA0045.severity = suggestion    # MA0045: Do not use blocking call in a sync method (need to make containing method async)
dotnet_diagnostic.MA0046.severity = warning    # MA0046: Use EventHandler<T> to declare events
dotnet_diagnostic.MA0047.severity = warning    # MA0047: Declare types in namespaces
dotnet_diagnostic.MA0048.severity = warning    # MA0048: File name must match type name
dotnet_diagnostic.MA0049.severity = warning    # MA0049: Type name should not match containing namespace
dotnet_diagnostic.MA0050.severity = warning    # MA0050: Validate arguments correctly in iterator methods
dotnet_diagnostic.MA0051.severity = warning    # MA0051: Method is too long
dotnet_diagnostic.MA0052.severity = warning    # MA0052: Replace constant Enum.ToString with nameof
dotnet_diagnostic.MA0053.severity = warning    # MA0053: Make class sealed
dotnet_diagnostic.MA0054.severity = warning    # MA0054: Embed the caught exception as innerException
dotnet_diagnostic.MA0055.severity = warning    # MA0055: Do not use finalizer
dotnet_diagnostic.MA0056.severity = warning    # MA0056: Do not call overridable members in constructor
dotnet_diagnostic.MA0057.severity = warning    # MA0057: Class name should end with 'Attribute'
dotnet_diagnostic.MA0058.severity = warning    # MA0058: Class name should end with 'Exception'
dotnet_diagnostic.MA0059.severity = warning    # MA0059: Class name should end with 'EventArgs'
dotnet_diagnostic.MA0060.severity = warning    # MA0060: The value returned by Stream.Read/Stream.ReadAsync is not used
dotnet_diagnostic.MA0061.severity = warning    # MA0061: Method overrides should not change parameter defaults
dotnet_diagnostic.MA0062.severity = warning    # MA0062: Non-flags enums should not be marked with "FlagsAttribute"
dotnet_diagnostic.MA0063.severity = warning    # MA0063: Use Where before OrderBy
dotnet_diagnostic.MA0064.severity = warning    # MA0064: Avoid locking on publicly accessible instance
dotnet_diagnostic.MA0065.severity = warning    # MA0065: Default ValueType.Equals or HashCode is used for struct's equality
dotnet_diagnostic.MA0066.severity = warning    # MA0066: Hash table unfriendly type is used in a hash table
dotnet_diagnostic.MA0067.severity = warning    # MA0067: Use Guid.Empty
dotnet_diagnostic.MA0068.severity = warning    # MA0068: Invalid parameter name for nullable attribute
dotnet_diagnostic.MA0069.severity = warning    # MA0069: Non-constant static fields should not be visible
dotnet_diagnostic.MA0070.severity = warning    # MA0070: Obsolete attributes should include explanations
dotnet_diagnostic.MA0071.severity = warning    # MA0071: Avoid using redundant else
dotnet_diagnostic.MA0072.severity = warning    # MA0072: Do not throw from a finally block
dotnet_diagnostic.MA0073.severity = warning    # MA0073: Avoid comparison with bool constant
dotnet_diagnostic.MA0074.severity = warning    # MA0074: Avoid implicit culture-sensitive methods
dotnet_diagnostic.MA0075.severity = warning    # MA0075: Do not use implicit culture-sensitive ToString
dotnet_diagnostic.MA0076.severity = warning    # MA0076: Do not use implicit culture-sensitive ToString in interpolated strings
dotnet_diagnostic.MA0077.severity = warning    # MA0077: A class that provides Equals(T) should implement IEquatable<T>
dotnet_diagnostic.MA0078.severity = warning    # MA0078: Use 'Cast' instead of 'Select' to cast
dotnet_diagnostic.MA0079.severity = warning    # MA0079: Flow the cancellation token using .WithCancellation()
dotnet_diagnostic.MA0080.severity = suggestion    # MA0080: Use a cancellation token using .WithCancellation()
dotnet_diagnostic.MA0081.severity = warning    # MA0081: Method overrides should not omit params keyword
dotnet_diagnostic.MA0082.severity = warning    # MA0082: NaN should not be used in comparisons
dotnet_diagnostic.MA0083.severity = warning    # MA0083: ConstructorArgument parameters should exist in constructors
dotnet_diagnostic.MA0084.severity = warning    # MA0084: Local variable should not hide other symbols
dotnet_diagnostic.MA0085.severity = warning    # MA0085: Anonymous delegates should not be used to unsubscribe from Events
dotnet_diagnostic.MA0086.severity = warning    # MA0086: Do not throw from a finalizer
dotnet_diagnostic.MA0087.severity = warning    # MA0087: Parameters with [DefaultParameterValue] attributes should also be marked [Optional]
dotnet_diagnostic.MA0088.severity = warning    # MA0088: Use [DefaultParameterValue] instead of [DefaultValue]
dotnet_diagnostic.MA0089.severity = warning    # MA0089: Optimize string method usage
dotnet_diagnostic.MA0090.severity = warning    # MA0090: Remove empty else/finally block
dotnet_diagnostic.MA0091.severity = warning    # MA0091: Sender should be 'this' for instance events
dotnet_diagnostic.MA0092.severity = warning    # MA0092: Sender should be 'null' for static events
dotnet_diagnostic.MA0093.severity = warning    # MA0093: EventArgs should not be null
dotnet_diagnostic.MA0094.severity = warning    # MA0094: A class that provides CompareTo(T) should implement IComparable<T>
dotnet_diagnostic.MA0095.severity = warning    # MA0095: A class that implements IEquatable<T> should override Equals(object)
dotnet_diagnostic.MA0096.severity = warning    # MA0096: A class that implements IComparable<T> should also implement IEquatable<T>
dotnet_diagnostic.MA0097.severity = warning    # MA0097: A class that implements IComparable<T> or IComparable should override comparison operators
dotnet_diagnostic.MA0098.severity = warning    # MA0098: Use indexer instead of LINQ methods
dotnet_diagnostic.MA0099.severity = warning    # MA0099: Use Explicit enum value instead of 0
dotnet_diagnostic.MA0100.severity = warning    # MA0100: Await task before disposing resources
dotnet_diagnostic.MA0101.severity = warning     # MA0101: String contains an implicit end of line character
dotnet_diagnostic.MA0102.severity = warning    # MA0102: Make member readonly
dotnet_diagnostic.MA0103.severity = warning    # MA0103: Use SequenceEqual instead of equality operator
dotnet_diagnostic.CA1848.severity = silent